// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RobotNeverDie

//@version=4
study("Godmode Oscillator Indicator", shorttitle="Godmode Oscillator Indicator v0.1.0", overlay=false)

// Description:
// A rewrite of Godmode Oscillator https://www.tradingview.com/script/HL3vqXUM-Godmode-Oscillator-fresh-bread-generator-free-to-use/
// @author LazyBear, xSilas, Ni6HTH4wK
//
// More at https://github.com/robotneverdie-algo/Pine-Script

//{=================================================================================== Misc. Functions =====================================================================================}

source(x) =>
    if x == "open"
        open
    else
        if x == "high"
            high
        else
            if x == "low"
                low
            else
                if x == "close"
                    close
                else
                    if x == "hl2"
                        hl2
                    else
                        if x == "hlc3"
                            hlc3
                        else
                            if x == "ohlc4"
                                ohlc4
                            else
                                vwap

//{=============================================================================== Moving Average Functions ================================================================================}

// Coefficient of Variation Weighted Moving Average https://www.tradingview.com/script/0dBtJvhu-Stratus-DW/
cvwma(x, len) =>
    cv = stdev(x, len) / sma(x, len)
    w = x * cv
    sum(w, len) / sum(cv, len)

// Double Exponential Moving Average
dema(x, len) =>
    e = ema(x, len)
    2 * e - ema(e, len)

// Donchian Middle Channel
donchian(len) =>
    avg(lowest(len), highest(len))

// clamp a number in an range
clamp(x, xmin, xmax) =>
    max(min(x, xmax), xmin)

// Fractal Adaptive Moving Average http://www.mesasoftware.com/papers/FRAMA.pdf
frama(x, len) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    a = exp(-4.6 * (d - 1))
    alpha = clamp(nz(a), 0.01, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Hull Moving Average
hull(x, len) =>
    wma(2 * wma(x, len / 2) - wma(x, len), round(sqrt(len)))

// Jurik Moving Average https://www.tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/
jma(x, len, phase, power) =>
    // Copyright (c) 2007-present Jurik Research and Consulting. All rights reserved.
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    ratio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
    beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
    alpha = pow(beta, power)
    j = 0.0
    e0 = 0.0
    e1 = 0.0
    e2 = 0.0
    e0 := (1 - alpha) * x + alpha * nz(e0[1])
    e1 := (x - e0) * (1 - beta) + beta * nz(e1[1])
    e2 := (e0 + ratio * e1 - nz(j[1])) * pow(1 - alpha, 2) + pow(alpha, 2) * nz(e2[1])
    j := e2 + nz(j[1])
    j

// Kaufman Adaptive Moving Average
kama(x, len, fast, slow) =>
    f = 2 / (fast + 1)
    s = 2 / (slow + 1)
    change = abs(change(x, len))
    volatility = sum(abs(change(x)), len)
    er = change / volatility
    sc = pow(er * (f - s) + s, 2)
    k = 0.0
    k := nz(k[1], sma(x, len)) + sc * (x - nz(k[1], sma(x, len)))
    k

// Least Square Moving Average
lsma(x, len, offset) =>
   linreg(x, len, offset)

// McGinley Dynamic
mcginley(x, len, factor) =>
    md = 0.0
    md := na(md[1]) ? x : md[1] + (x - md[1]) / (factor * len * pow(x / md[1], 4))
    md

// Modified Fractal Adaptive Moving Average http://etfhq.com/blog/2010/09/30/fractal-adaptive-moving-average-frama/#Mod
modframa(x, len, fast, slow) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    w = 2 / (slow + 1)
    olda = exp(log(w) * (d - 1))
    n = (2 - olda) / olda
    nn = (slow - fast) * (n - 1) / (slow - 1) + fast
    a = 2 / (nn + 1)
    alpha = clamp(nz(a), w, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Smoothed Moving Average
smma(x, len) =>
    s = sma(x, len)
    s := (sum(x, len) - nz(s[1]) + x) / len
    s

// SuperSmoother Filter http://www.mesasoftware.com/papers/PredictiveIndicatorsForEffectiveTrading%20Strategies.pdf
supersmoother(x, len) =>
    pi = 3.14159
    y = exp(-sqrt(2) * pi / len)

    c = -y * y
    b = 2.0 * y * cos(sqrt(2) * pi / len)
    a = 1 - b - c

    z = 0.0
    z := iff(bar_index == 0, 0.0, iff(bar_index == 1, b * nz(z[1]), iff(bar_index == 2,  b * nz(z[1]) + c * nz(z[2]), a * ((x + nz(x[1])) / 2) + b * nz(z[1]) + c * nz(z[2]))))
    z

// Triple Exponential Moving Average
tema(x, len) =>
    e1 = ema(x, len)
    e2 = ema(e1, len)
    e3 = ema(e2, len)
    (3 * e1) - (3 * e2) + e3

// Volatility Adjusted Moving Average https://www.tradingview.com/script/ZHGCH1jf-Volatility-Adjusted-Moving-Average-JD/
vama(x, len, lookback) =>
    // © Copyright 2019 to present, Joris Duyck (JD)
    mean = ema(x, len)
    diff = x - mean
    up = highest(diff, lookback)
    down = lowest(diff, lookback)
    mean + avg(up, down)

// Variable Index Dynamic Average https://www.tradingview.com/script/hdrf0fXV-Variable-Index-Dynamic-Average-VIDYA/
vidya(x, len, ema_len) =>
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    diff = change(x, len)
    up = diff > 0 ? diff : 0.0
    down  = diff < 0 ? abs(diff) : 0.0
    cmo = abs((cum(up) - cum(down)) / (cum(up) + cum(down)))
    a = 2 / (ema_len + 1)
    v = 0.0
    v := x * a * cmo + nz(v[1]) * (1 - a * cmo)
    v

// Zero Lag Exponential Moving Average http://www.mesasoftware.com/papers/ZeroLag.pdf
zlema(x, len, limit) =>
    a = 2 / (len + 1)
    e = 0.0
    e := a * x + (1 - a) * nz(e[1])
    ec = 0.0
    least_error = 1000000.0
    best_gain = 0.0
    for i = -limit to limit
        gain = i / 10
        ec := a * (e + gain * (x - ec[1])) + (1 - a) * nz(ec[1])
        error = x - ec
        if abs(error) < least_error
            least_error := abs(error)
            best_gain := gain
    ec := a * (e + best_gain * (x - nz(ec[1]))) + (1 - a) * nz(ec[1])

//{============================================================================= Backtest Date Range Setting ===============================================================================}

_backtest_header = input(true, type=input.bool, title="{================== Backtest Date Range Setting =================}")
_use_date_range = input(true, type=input.bool, title="Use Date Range")
_start_day = input(1, minval=1, maxval=31, title="Start Date")
_start_month = input(1, minval=1, maxval=12, title="Start Month")
_start_year = input(1950, minval=2011, title="Start Year")
_end_day = input(1, minval=1, maxval=31, title="End Date")
_end_month = input(1, minval=1, maxval=12, title="End Month")
_end_year = input(2050, minval=2019, title="End Year")

_start = timestamp(_start_year, _start_month, _start_day, 0, 0)
_end = timestamp(_end_year, _end_month, _end_day, 0, 0)

// Bar window Function
bar_window() =>
    if _use_date_range
        time >= _start and time <= _end
    else
        true

//{=================================================================================== Strategy Setting =====================================================================================}

_strategy_header = input(true, type=input.bool, title="{====================== Strategy Settings =======================}")
_trades_count = input(1, minval=1, title="Trades Count")
_src = input("hlc3", options=["open", "high", "low", "close", "hl2", "hlc3", "ohlc4", "vwap"], title="Source")
_use_tf = input(false, type=input.bool, title="Use Different Timeframe")
_tf = input("240", type=input.resolution, title="Timeframe")
_market_position = input("Both", options=["Both", "Long", "Short"], title="Market Position")

//{============================================================================== Godmode Oscillator Setting ===============================================================================}

_gmo_header = input(true, type=input.bool, title="{================== Godmode Oscillator Setting ==================}")

_use_multi = input(false, type=input.bool, title="Use Multi-Exchange Source")
_exch_sym1 = input("COINBASE:BTCUSD", type=input.symbol, title="Exchange 1 Symbol")
_exch_sym2 = input("BITSTAMP:BTCUSD", type=input.symbol, title="Exchange 2 Symbol")
_exch_sym3 = input("BITFINEX:BTCUSD", type=input.symbol, title="Exchange 3 Symbol")
_exch_sym4 = input("OKCOIN:BTCUSD", type=input.symbol, title="Exchange 4 Symbol")

_channel_len = input(9, "Channel Length")
_average_len = input(26, "Average Length")
_short_len = input(13, "Short length")

_oversold_level = input(20, "Oversold Level")
_overbough_level = input(80, "Overbough Level")

//{============================================================================= Slow Moving Average Setting ===============================================================================}

_slow_header = input(true, type=input.bool, title="{================= Slow Moving Average Setting ==================}")
_slow_type = input("smma", options=["alma", "cvwma", "dema", "donchian", "ema", "frama", "hull", "jma", "kama", "lsma", "mcginley", "modframa", "rma", "sma", "smma", "supersmoother", "tema", "vama", "vidya", "vwma", "wma", "zlema"], title="Moving Average Type")
_slow_len = input(32, minval=2, type=input.integer, title="Length")

_slow_alma_offset = input(0.8, step=0.01, minval=0.0, maxval=1.0, title="alma: offset")
_slow_alma_sigma = input(10, title="alma: sigma")
_slow_jma_phase = input(50, title="jma: phase")
_slow_jma_power = input(2, title="jma: power")
_slow_kama_fast = input(2, title="kama: fast")
_slow_kama_slow = input(30, title="kama: slow")
_slow_lsma_offset = input(0, minval=0, title="lsma: offset")
_slow_mcginley_factor = input(0.6, step=0.01, minval=0.0, maxval=1.0, title="mcginley: smoothing factor")
_slow_modframa_fast = input(1, title="modframa: fast")
_slow_modframa_slow = input(198, title="modframa: slow")
_slow_vama_lookback = input(50, title="vama: fast")
_slow_vidya_len = input(30, title="vidya: ema length")
_slow_zlema_limit = input(50, title="zlema: gain limit")

slow_moving_average1(src, type, len) =>
    if type == "modframa"
        modframa(src, len, _slow_modframa_fast, _slow_modframa_slow)
    else
        if type == "rma"
            rma(src, len)
        else
            if type == "sma"
                sma(src, len)
            else
                if type == "smma"
                    smma(src, len)
                else
                    if type == "supersmoother"
                        supersmoother(src, len)
                    else
                        if type == "tema"
                            tema(src, len)
                        else
                            if type == "vama"
                                vama(src, len, _slow_vama_lookback)
                            else
                                if type == "vidya"
                                    vidya(src, len, _slow_vidya_len)
                                else
                                    if type == "vwma"
                                        vwma(src, len)
                                    else
                                        if type == "wma"
                                            wma(src, len)
                                        else
                                            zlema(src, len, _slow_zlema_limit)

slow_moving_average(src, type, len) =>
    if type == "alma"
        alma(src, len, _slow_alma_offset, _slow_alma_sigma)
    else
        if type == "cvwma"
            cvwma(src, len)
        else
            if type == "dema"
                dema(src, len)
            else
                if type == "donchian"
                    donchian(len)
                else
                    if type == "ema"
                        ema(src, len)
                    else
                        if type == "frama"
                            frama(src, len)
                        else
                            if type == "hull"
                                hull(src, len)
                            else
                                if type == "jma"
                                    jma(src, len, _slow_jma_phase, _slow_jma_power)
                                else
                                    if type == "kama"
                                        kama(src, len, _slow_kama_fast, _slow_kama_slow)
                                    else
                                        if type == "lsma"
                                            lsma(src, len, _slow_lsma_offset)
                                        else
                                            if type == "mcginley"
                                                mcginley(src, len, _slow_mcginley_factor)
                                            else
                                                slow_moving_average1(src, type, len)

//{==================================================================================== Strategy Logic =====================================================================================}

_source = _use_tf ? security(syminfo.tickerid, _tf, source(_src)) : source(_src)

_exch_src1 = _use_tf ? security(_exch_sym1, _tf, source(_src)) : security(_exch_sym1, timeframe.period, source(_src))
_exch_src2 = _use_tf ? security(_exch_sym2, _tf, source(_src)) : security(_exch_sym2, timeframe.period, source(_src))
_exch_src3 = _use_tf ? security(_exch_sym3, _tf, source(_src)) : security(_exch_sym3, timeframe.period, source(_src))
_exch_src4 = _use_tf ? security(_exch_sym4, _tf, source(_src)) : security(_exch_sym4, timeframe.period, source(_src))

tci(x, channel_len, average_len) =>
    ema((x - ema(x, channel_len)) / (0.025 * ema(abs(x - ema(x, channel_len)), channel_len)), average_len) + 50

mf(x, short_len) =>
    rsi(sum(volume * (change(x) <= 0 ? 0 : x), short_len), sum(volume * (change(x) >= 0 ? 0 : x), short_len))

willy(x, average_len) =>
    60 * (x - highest(x, average_len)) / (highest(x, average_len) - lowest(x, average_len)) + 80

csi(x, y, channel_len, average_len, short_len) =>
    avg(tsi(x, channel_len, average_len) * 50 + 50, rsi(y, short_len))

godmode(x, y, channel_len, average_len, short_len) =>
    avg(tci(y, channel_len, average_len), csi(x, y, channel_len, average_len, short_len), mf(y, short_len), willy(y, average_len))

tradition(x, channel_len, average_len, short_len) =>
    avg(tci(x, channel_len, average_len), mf(x, short_len), rsi(x, short_len))

_gm1 = godmode(_source, _source, _channel_len, _average_len, _short_len)
_gm2 = godmode(_source, _exch_src1, _channel_len, _average_len, _short_len)
_gm3 = godmode(_source, _exch_src2, _channel_len, _average_len, _short_len)
_gm4 = godmode(_source, _exch_src3, _channel_len, _average_len, _short_len)
_gm5 = godmode(_source, _exch_src4, _channel_len, _average_len, _short_len)

_fast = _use_multi ? avg(_gm1, _gm2, _gm3, _gm4, _gm5) : tradition(_source, _channel_len, _average_len, _short_len)
_slow = slow_moving_average(_fast, _slow_type, _slow_len)
_diff = ema((_fast - _slow) * 2 + 50, _short_len)

//{=================================================================================== Strategy Signal =====================================================================================}

_long = crossover(_fast, _slow) and rising(_diff, 1)
_short = crossunder(_fast, _slow) and falling(_diff, 1)

_xlong = crossover(_slow, _overbough_level)
_xshort = crossunder(_slow, _oversold_level)

var _long_count = 0
var _short_count = 0

var _when_long = 0
var _when_short = 0
var _when_exit = 0

_in_long = _when_long > _when_short and _when_long > _when_exit
_in_short = _when_short > _when_long and _when_short > _when_exit
_in_exit = _when_exit > _when_long and _when_exit > _when_short

if _long
    if _in_short or _in_exit
        _long_count := 1
    else
        _long_count := nz(_long_count[1]) + 1
    _short_count := 0
    _in_short := false
    if _long_count <= _trades_count
        _when_long := time

if _short
    if _in_long or _in_exit
        _short_count := 1
    else
        _short_count := nz(_short_count[1]) + 1
    _long_count := 0
    _in_long := false
    if _short_count <= _trades_count
        _when_short := time

if (_xlong and _in_long) or (_xshort and _in_short)
    _when_exit := time

_enter_long = _when_long == time and bar_window() and (_market_position == "Long" or _market_position == "Both")
_enter_short = _when_short == time and bar_window() and (_market_position == "Short" or _market_position == "Both")
_exit_trade = _when_exit == time

//{==================================================================================== Strategy Draw ======================================================================================}

hline(_oversold_level, color=#ffc100, title="Oversold")
hline(_overbough_level, color=#ffc100, title="Overbough")

plot(_fast, linewidth=2, color=#1ca168, transp=0, title="Fast")
plot(_slow, linewidth=2, color=#ce2020, transp=0, title="Slow")
plot(_slow < _oversold_level ? _slow + 5 : _slow > _overbough_level ? _slow - 5 : na, style=plot.style_circles, linewidth=2, color=#ffc100, transp=0, title="Over Extended")
plot(_diff, style=plot.style_area, linewidth=2, color=_diff > 50 ? #1ca168 : #ce2020, transp=80, histbase=50)

plotshape(_enter_long, style=shape.xcross, location=location.bottom, color=#1ca168)
plotshape(_enter_short, style=shape.xcross, location=location.bottom, color=#ce2020)
plotshape(_exit_trade, style=shape.xcross, location=location.bottom, color=#ffc100)
barcolor(_enter_long ? #1ca168 : _enter_short ? #ce2020 : _exit_trade ? #ffc100 : na)
