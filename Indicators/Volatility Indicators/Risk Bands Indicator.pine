// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RobotNeverDie

//@version=4
strategy("Risk Bands Indicator", shorttitle="Risk Bands Indicator v0.2.0", overlay=true, pyramiding=100, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=3)
// study("Risk Bands Indicator", shorttitle="Risk Bands Indicator v0.2.0", overlay=true)

// Description:
// An indicator for stop-loss and profit-taking.
//
// More at https://github.com/robotneverdie-algo/Pine-Script

//{=================================================================================== Misc. Functions =====================================================================================}

source(x) =>
    if x == "open"
        open
    else
        if x == "high"
            high
        else
            if x == "low"
                low
            else
                if x == "close"
                    close
                else
                    if x == "hl2"
                        hl2
                    else
                        if x == "hlc3"
                            hlc3
                        else
                            if x == "ohlc4"
                                ohlc4
                            else
                                vwap

// String format of min tick value for the current symbol to eight decimal places.
min_tick_format() =>
    format = "#.#"
    for i = 1 to 8
        if pow(10, i) * syminfo.mintick < 1
            format := format + "#"
    format

// Draw an panel to display infomation on chart.
info_panel(x, y, panel_color, text_color, messages) =>
    var headers = "{=========== {\\/} ===========}"
    var label panel = na

    content = headers
    content := content + "\n" + messages
    content := content + "\n" + headers

    label.delete(panel)
    panel := label.new(x, y, text=content, xloc=xloc.bar_time, yloc=yloc.price, color=panel_color, textcolor=text_color, style=label.style_labelup)

// Percentage Difference
pct_diff(x, y) =>
    abs(x - y) / avg(x, y) * 100

// Position Size Formula
position_size(capital, risk, entry, stop) =>
    stop_distance = pct_diff(entry, stop)
    risk_amount = capital * (risk / 100)
    risk_amount / stop_distance * 100

//{==================================================================================== Channel Bands ======================================================================================}

bands(x, type, len, mult) =>
    if type == "bollinger"
        // Bollinger Bands
        basis = sma(x, len)
        volatility = stdev(x, len)
        [basis + (volatility * mult), basis - (volatility * mult)]
    else
        if type == "keltner"
            // Keltner Channels
            basis = ema(x, len)
            volatility = atr(len)
            [basis + (volatility * mult), basis - (volatility * mult)]
        else
            if type == "atr"
                // Average True Range
                basis = x
                volatility = atr(len)
                [basis + (volatility * mult), basis - (volatility * mult)]
            else
                if type == "donchian"
                    // Donchian Channel
                    upper = highest(len)
                    lower = lowest(len)
                    basis = avg(upper, lower)
                    volatility = upper - lower
                    [basis + (volatility * mult), basis - (volatility * mult)]
                else
                    // Chandelier Exit
                    upper = highest(len)
                    lower = lowest(len)
                    volatility = atr(len)
                    [upper - (volatility * mult) , lower + (volatility * mult)]

//{=============================================================================== Moving Average Functions ================================================================================}

// Coefficient of Variation Weighted Moving Average https://www.tradingview.com/script/0dBtJvhu-Stratus-DW/
cvwma(x, len) =>
    cv = stdev(x, len) / sma(x, len)
    w = x * cv
    sum(w, len) / sum(cv, len)

// Double Exponential Moving Average
dema(x, len) =>
    e = ema(x, len)
    2 * e - ema(e, len)

// Donchian Middle Channel
donchian(len) =>
    avg(lowest(len), highest(len))

// Error Corrected EMA http://www.mesasoftware.com/papers/ZeroLag.pdf
ecema(x, len, limit) =>
    a = 2 / (len + 1)
    e = 0.0
    e := a * x + (1 - a) * nz(e[1])
    ec = 0.0
    least_error = 1000000.0
    best_gain = 0.0
    for i = -limit to limit
        gain = i / 10
        ec := a * (e + gain * (x - ec[1])) + (1 - a) * nz(ec[1])
        error = x - ec
        if abs(error) < least_error
            least_error := abs(error)
            best_gain := gain
    ec := a * (e + best_gain * (x - nz(ec[1]))) + (1 - a) * nz(ec[1])

// clamp a number in an range
clamp(x, xmin, xmax) =>
    max(min(x, xmax), xmin)

// Fractal Adaptive Moving Average http://www.mesasoftware.com/papers/FRAMA.pdf
frama(x, len) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    a = exp(-4.6 * (d - 1))
    alpha = clamp(nz(a), 0.01, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Hull Moving Average
hull(x, len) =>
    wma(2 * wma(x, len / 2) - wma(x, len), round(sqrt(len)))

// Jurik Moving Average https://www.tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/
jma(x, len, phase, power) =>
    // Copyright (c) 2007-present Jurik Research and Consulting. All rights reserved.
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    ratio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
    beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
    alpha = pow(beta, power)
    j = 0.0
    e0 = 0.0
    e1 = 0.0
    e2 = 0.0
    e0 := (1 - alpha) * x + alpha * nz(e0[1])
    e1 := (x - e0) * (1 - beta) + beta * nz(e1[1])
    e2 := (e0 + ratio * e1 - nz(j[1])) * pow(1 - alpha, 2) + pow(alpha, 2) * nz(e2[1])
    j := e2 + nz(j[1])
    j

// Kaufman Adaptive Moving Average
kama(x, len, fast, slow) =>
    f = 2 / (fast + 1)
    s = 2 / (slow + 1)
    change = abs(change(x, len))
    volatility = sum(abs(change(x)), len)
    er = change / volatility
    sc = pow(er * (f - s) + s, 2)
    k = 0.0
    k := nz(k[1], sma(x, len)) + sc * (x - nz(k[1], sma(x, len)))
    k

// Least Square Moving Average
lsma(x, len, offset) =>
   linreg(x, len, offset)

// McGinley Dynamic
mcginley(x, len, factor) =>
    md = 0.0
    md := na(md[1]) ? x : md[1] + (x - md[1]) / (factor * len * pow(x / md[1], 4))
    md

// Modified Fractal Adaptive Moving Average http://etfhq.com/blog/2010/09/30/fractal-adaptive-moving-average-frama/#Mod
modframa(x, len, fast, slow) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    w = 2 / (slow + 1)
    olda = exp(log(w) * (d - 1))
    n = (2 - olda) / olda
    nn = (slow - fast) * (n - 1) / (slow - 1) + fast
    a = 2 / (nn + 1)
    alpha = clamp(nz(a), w, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Smoothed Moving Average
smma(x, len) =>
    s = sma(x, len)
    s := (sum(x, len) - nz(s[1]) + x) / len
    s

// SuperSmoother Filter http://www.mesasoftware.com/papers/PredictiveIndicatorsForEffectiveTrading%20Strategies.pdf
supersmoother(x, len) =>
    pi = 3.14159
    y = exp(-sqrt(2) * pi / len)

    c = -y * y
    b = 2.0 * y * cos(sqrt(2) * pi / len)
    a = 1 - b - c

    z = 0.0
    z := iff(bar_index == 0, 0.0, iff(bar_index == 1, b * nz(z[1]), iff(bar_index == 2,  b * nz(z[1]) + c * nz(z[2]), a * ((x + nz(x[1])) / 2) + b * nz(z[1]) + c * nz(z[2]))))
    z

// Triple Exponential Moving Average
tema(x, len) =>
    e1 = ema(x, len)
    e2 = ema(e1, len)
    e3 = ema(e2, len)
    (3 * e1) - (3 * e2) + e3

// Volatility Adjusted Moving Average https://www.tradingview.com/script/ZHGCH1jf-Volatility-Adjusted-Moving-Average-JD/
vama(x, len, lookback) =>
    // © Copyright 2019 to present, Joris Duyck (JD)
    mean = ema(x, len)
    diff = x - mean
    up = highest(diff, lookback)
    down = lowest(diff, lookback)
    mean + avg(up, down)

// Variable Index Dynamic Average https://www.tradingview.com/script/hdrf0fXV-Variable-Index-Dynamic-Average-VIDYA/
vidya(x, len, ema_len) =>
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    diff = change(x, len)
    up = diff > 0 ? diff : 0.0
    down  = diff < 0 ? abs(diff) : 0.0
    cmo = abs((cum(up) - cum(down)) / (cum(up) + cum(down)))
    a = 2 / (ema_len + 1)
    v = 0.0
    v := x * a * cmo + nz(v[1]) * (1 - a * cmo)
    v

// Zero Lag Exponential Moving Average https://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm
zlema(x, len) =>
    a = 2 / (len + 1)
    lag = (len - 1) / 2
    e = 0.0
    e := a * (2 * x - x[lag]) + (1 - a) * nz(e[1])
    e

// Moving Average with default settings
moving_average1(src, type, len) =>
    if type == "modframa"
        modframa(src, len, 2, 198)
    else
        if type == "rma"
            rma(src, len)
        else
            if type == "sma"
                sma(src, len)
            else
                if type == "smma"
                    smma(src, len)
                else
                    if type == "supersmoother"
                        supersmoother(src, len)
                    else
                        if type == "tema"
                            tema(src, len)
                        else
                            if type == "vama"
                                vama(src, len, 50)
                            else
                                if type == "vidya"
                                    vidya(src, len, 30)
                                else
                                    if type == "vwma"
                                        vwma(src, len)
                                    else
                                        if type == "wma"
                                            wma(src, len)
                                        else
                                            zlema(src, len)

moving_average(src, type, len) =>
    if type == "alma"
        alma(src, len, 0.8, 10)
    else
        if type == "cvwma"
            cvwma(src, len)
        else
            if type == "dema"
                dema(src, len)
            else
                if type == "donchian"
                    donchian(len)
                else
                    if type == "ecema"
                        ecema(src, len, 50)
                    else
                        if type == "ema"
                            ema(src, len)
                        else
                            if type == "frama"
                                frama(src, len)
                            else
                                if type == "hull"
                                    hull(src, len)
                                else
                                    if type == "jma"
                                        jma(src, len, 50, 2)
                                    else
                                        if type == "kama"
                                            kama(src, len, 2, 30)
                                        else
                                            if type == "lsma"
                                                lsma(src, len, 0)
                                            else
                                                if type == "mcginley"
                                                    mcginley(src, len, 0.6)
                                                else
                                                    moving_average1(src, type, len)

//{============================================================================= Backtest Date Range Setting ===============================================================================}

_backtest_header = input(true, type=input.bool, title="{================== Backtest Date Range Setting =================}")
_use_date_range = input(true, type=input.bool, title="Use Date Range")
_start_day = input(1, minval=1, maxval=31, title="Start Date")
_start_month = input(1, minval=1, maxval=12, title="Start Month")
_start_year = input(1950, minval=2011, title="Start Year")
_end_day = input(1, minval=1, maxval=31, title="End Date")
_end_month = input(1, minval=1, maxval=12, title="End Month")
_end_year = input(2050, minval=2019, title="End Year")

_start = timestamp(_start_year, _start_month, _start_day, 0, 0)
_end = timestamp(_end_year, _end_month, _end_day, 0, 0)

// Bar window Function
bar_window() =>
    if _use_date_range
        time >= _start and time <= _end
    else
        true

//{=================================================================================== Strategy Setting =====================================================================================}

_strategy_header = input(true, type=input.bool, title="{====================== Strategy Settings =======================}")
_trades_count = input(1, minval=1, title="Trades Count")
_src = input("close", options=["open", "high", "low", "close", "hl2", "hlc3", "ohlc4", "vwap"], title="Source")
_use_tf = input(false, type=input.bool, title="Use Different Timeframe")
_tf = input("240", type=input.resolution, title="Timeframe")
_market_position = input("Both", options=["Both", "Long", "Short"], title="Market Position")

//{================================================================================ Moving Average Setting =================================================================================}

_ma_header = input(true, type=input.bool, title="{==================== Moving Average Setting ====================}")
_ma_type = input("hull", options=["alma", "cvwma", "dema", "donchian", "ecema", "ema", "frama", "hull", "jma", "kama", "lsma", "mcginley", "modframa", "rma", "sma", "smma", "supersmoother", "tema", "vama", "vidya", "vwma", "wma", "zlema"], title="Type")
_ma_len = input(30, title="Length")

//{================================================================================= Risk Bands Setting ====================================================================================}

_bands_header = input(true, type=input.bool, title="{====================== Risk Bands Setting ======================}")
_bands_type = input("atr", options=["bollinger", "keltner", "atr", "donchian", "chandelier"], title="Type")
_bands_len = input(100, title="Length")

_stp_multi = input(1, minval=0.1, step=0.1, title="Stop: Multiplier")
_tp1_multi = input(1, minval=0.1, step=0.1, title="TP1: Multiplier")
_tp2_multi = input(2, minval=0.1, step=0.1, title="TP2: Multiplier")
_tp3_multi = input(3, minval=0.1, step=0.1, title="TP3: Multiplier")

_tp1_percent = input(50, minval=1, step=1, title="TP1: Percent")
_tp2_percent = input(30, minval=1, step=1, title="TP2: Percent")

//{=============================================================================== Position Sizing Setting =================================================================================}

_position_sizing_header = input(true, type=input.bool, title="{==================== Position Sizing Setting ===================}")
_initial_capital = input(10000, minval=0.00000001, title="Initial Capital")
_risk = input(2, minval=0.01, maxval=100, step=0.01, title="Risk Percent")

//{==================================================================================== Strategy Logic =====================================================================================}

_source = _use_tf ? security(syminfo.tickerid, _tf, source(_src)) : source(_src)

// Moving Average
_ma = moving_average(_source, _ma_type, _ma_len)

// Price Target
[_stop_upper, _stop_lower] = bands(_source, _bands_type, _bands_len, _stp_multi)
[_tp1_upper, _tp1_lower] = bands(_source, _bands_type, _bands_len, _tp1_multi)
[_tp2_upper, _tp2_lower] = bands(_source, _bands_type, _bands_len, _tp2_multi)
[_tp3_upper, _tp3_lower] = bands(_source, _bands_type, _bands_len, _tp3_multi)

//{=================================================================================== Strategy Signal =====================================================================================}

_long = _source > _ma
_short = _source < _ma

_xlong = false
_xshort = false

var _long_count = 0
var _short_count = 0

var _when_long = 0
var _when_short = 0
var _when_exit = 0

_in_long = _when_long > _when_short and _when_long > _when_exit
_in_short = _when_short > _when_long and _when_short > _when_exit
_in_exit = _when_exit > _when_long and _when_exit > _when_short

if _long
    if _in_short or _in_exit
        _long_count := 1
    else
        _long_count := nz(_long_count[1]) + 1
    _short_count := 0
    _in_short := false
    if _long_count <= _trades_count
        _when_long := time

if _short
    if _in_long or _in_exit
        _short_count := 1
    else
        _short_count := nz(_short_count[1]) + 1
    _long_count := 0
    _in_long := false
    if _short_count <= _trades_count
        _when_short := time

if (_xlong and _in_long) or (_xshort and _in_short)
    _when_exit := time

_enter_long = _when_long == time and bar_window() and (_market_position == "Long" or _market_position == "Both")
_enter_short = _when_short == time and bar_window() and (_market_position == "Short" or _market_position == "Both")
_exit_trade = _when_exit == time

//{==================================================================== Stop-Loss And Profit-Taking And Position Sizing ====================================================================}

var float _entry_price = na
var float _position_size = na
var float _stop = na
var float _tp1 = na
var float _tp2 = na
var float _tp3 = na

var float _hit_stop = na

if _enter_long or _in_long
    if _enter_long
        _entry_price := close
        _stop := _stop_lower
        _position_size := position_size(_initial_capital, _risk, _entry_price, _stop)
        _tp1 := _tp1_upper
        _tp2 := _tp2_upper
        _tp3 := _tp3_upper
        _hit_stop := na

    if _in_long
        _stop := _stop_lower
        _hit_stop := crossunder(low, _stop) ? _stop : na
else
    if _enter_short or _in_short
        if _enter_short
            _entry_price := close
            _stop := _stop_upper
            _position_size := position_size(_initial_capital, _risk, _entry_price, _stop)
            _tp1 := _tp1_lower
            _tp2 := _tp2_lower
            _tp3 := _tp3_lower
            _hit_stop := na

        if _in_short
            _stop := _stop_upper
            _hit_stop := crossover(high, _stop) ? _stop : na
    else
        if _exit_trade or _in_exit
            _entry_price := na
            _stop := na
            _position_size := na
            _hit_stop := na

if _in_long or _in_short
    if not na(_hit_stop)
        _when_exit := time
        _exit_trade := true

strategy.entry("Long", strategy.long, qty=_position_size, stop=_stop, when=_enter_long)
strategy.entry("Short", strategy.short, qty=_position_size, stop=_stop, when=_enter_short)
strategy.exit("TP1", "Long", limit=_tp1, qty_percent=_tp1_percent, when=_in_long)
strategy.exit("TP2", "Long", limit=_tp2, qty_percent=_tp2_percent, when=_in_long)
strategy.exit("TP1", "Short", limit=_tp1, qty_percent=_tp1_percent, when=_in_short)
strategy.exit("TP2", "Short", limit=_tp2, qty_percent=_tp2_percent, when=_in_short)
strategy.close_all(when=_exit_trade)

//{==================================================================================== Strategy Draw ======================================================================================}

_ma_color = _source > _ma ? #1ca168 : #ce2020
[_atr_upper, _atr_lower] = bands(_ma, "atr", _ma_len , 1.0)
_line = plot(_ma, linewidth=2, color=_ma_color, transp=0, title="MA")
_upper = plot(_atr_upper, style=plot.style_circles, linewidth=2, color=_source > _ma ? _ma_color : na, transp=75, title="ATR Upper")
_lower = plot(_atr_lower, style=plot.style_circles, linewidth=2, color=_source > _ma ? na : _ma_color, transp=75, title="ATR Lower")

fill(_upper, _line, color=_source > _ma ? _ma_color : na, transp=65, title="Upper Bound")
fill(_line, _lower, color=_source > _ma ? na : _ma_color, transp=65, title="Lower Bound")

plot(_stop, style=plot.style_circles, linewidth=2, color=#ce2020, transp=0, title="Stop")
plot(_tp1, style=plot.style_circles, linewidth=2, color=#1ca168, transp=0, title="Tp1")
plot(_tp2, style=plot.style_circles, linewidth=2, color=#1ca168, transp=0, title="Tp2")
plot(_tp3, style=plot.style_circles, linewidth=2, color=#1ca168, transp=0, title="Tp3")

//{================================================================================== TD Sequential Draw ===================================================================================}

// Draw an info panel for Stop-Loss, Profit-Taking and Position Sizing
_panel_x = time + int(change(time) * 20)
_panel_y = highest(50)
_panel_color = _enter_long or _in_long ? #1ca168 : _enter_short or _in_short ? #ce2020 : #051c4d
_text_color = #ffc100
_price_format = min_tick_format()

_btc_price = security("COINBASE:BTCUSD", timeframe.period, close)
_round_btc_to_tick = round(_btc_price / syminfo.mintick) * syminfo.mintick
_risk_percent = _risk / 100
_risk_amount = _initial_capital * _risk_percent
_risk_amount_btc = _risk_amount / _btc_price
_position_size_btc = _position_size / _round_btc_to_tick
_position_amount = _position_size / _entry_price
_position_amount_usd = _position_size_btc / _entry_price * _round_btc_to_tick

_endl = "\n"
string _messages = _endl
_messages := _messages + "Init Capital (USD): " + tostring(_initial_capital, _price_format) + _endl
_messages := _messages + "Risk: " + tostring(_risk_percent, "#.##%") + _endl
_messages := _messages + "Risk Amount (USD): " + tostring(_risk_amount) + _endl
_messages := _messages + "Risk Amount (BTC): " + tostring(_risk_amount_btc)+ _endl
_messages := _messages + "Position Size (USD): " + tostring(_position_size, _price_format)+ _endl
_messages := _messages + "Position Size (BTC): " + tostring(_position_size_btc)+ _endl
_messages := _messages + "Position Amount: " + tostring(_position_amount) + " Contracts" + _endl
_messages := _messages + "Position Amount: " + tostring(_position_size_btc) + " USD" + _endl
_messages := _messages + "Entry: " + tostring(_entry_price, _price_format) + _endl
_messages := _messages + "Stop: " + tostring(_stop, _price_format) + _endl
_messages := _messages + "TP1: " + tostring(_tp1, _price_format) + _endl
_messages := _messages + "TP2: " + tostring(_tp2, _price_format) + _endl
_messages := _messages + "TP3: " + tostring(_tp3, _price_format) + _endl
info_panel(_panel_x, _panel_y, _panel_color, _text_color, _messages)
